import pandas as pd
import ollama
import time
from concurrent.futures import ThreadPoolExecutor, as_completed

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
ETHALON_PATH = "data/ethalons.xlsx"
CSV_PATH = "14411311_202505092007363998.csv"
DISCIPLINE = "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
LECTURE_ID = "Lec01"
ID_COLUMN_NAME = "13.**–£–∫–∞–∂–∏—Ç–µ –í–∞—à ID:**"
LLM_MODEL = "mistral"  # –ó–∞–ø—É—Å—Ç–∏ ollama run mistral

# === 1. –ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ç–∞–ª–æ–Ω–æ–≤ ===
ethalons_df = pd.read_excel(ETHALON_PATH)
ethalons = ethalons_df[
    (ethalons_df["Discipline"] == DISCIPLINE) &
    (ethalons_df["Lecture_ID"] == LECTURE_ID)
].sort_values("Question_ID")

ethalon_questions = ethalons["Question"].astype(str).tolist()
ethalon_answers = ethalons["Answer"].astype(str).tolist()
num_questions = len(ethalon_answers)

# === 2. –ó–∞–≥—Ä—É–∑–∫–∞ CSV ===
csv_df = pd.read_csv(CSV_PATH, encoding="utf-8", engine="python")

# === 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤ ===
question_start_index = None
for i, col in enumerate(csv_df.columns):
    if "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è" in col or col.strip().startswith("1."):
        question_start_index = i
        break
if question_start_index is None:
    raise ValueError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ CSV!")

# === 4. –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ LLM ===
# === –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ LLM ===
def grade_with_llm(question, reference_answer, student_answer):
    if not student_answer.strip():
        return 0, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"

    prompt = f"""
–¢—ã ‚Äî –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –ü—Ä–æ–≤–µ—Ä—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –ø–æ —Å–º—ã—Å–ª—É.

–í–æ–ø—Ä–æ—Å: {question}
–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {reference_answer}
–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_answer}

–û—Ü–µ–Ω–∏ –ø–æ —à–∫–∞–ª–µ:
- 0 ‚Äî –Ω–µ –ø–æ —Ç–µ–º–µ
- 1 ‚Äî —á–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω–æ
- 2 ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ—Ä–Ω–æ

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º: 0, 1 –∏–ª–∏ 2.
"""

    try:
        response = ollama.chat(model=LLM_MODEL, messages=[
            {"role": "user", "content": prompt}
        ])
        reply = response["message"]["content"].strip()
        score = int([s for s in reply.split() if s.isdigit()][0])
        return min(max(score, 0), 2), reply
    except Exception as e:
        return 0, f"–û—à–∏–±–∫–∞: {e}"

# === –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ ===
def grade_student(student_id, questions, reference_answers, student_answers):
    from concurrent.futures import ThreadPoolExecutor, as_completed

    results = []
    total_score = 0

    with ThreadPoolExecutor(max_workers=10) as executor:
        future_to_question = {
            executor.submit(grade_with_llm, q, r, a): (i, q, r, a)
            for i, (q, r, a) in enumerate(zip(questions, reference_answers, student_answers), 1)
        }

        for future in as_completed(future_to_question):
            i, question, correct_ans, student_ans = future_to_question[future]
            score, feedback = future.result()
            total_score += score

            print(f"\n–í–æ–ø—Ä–æ—Å {i}: {question}")
            print(f"üîπ –≠—Ç–∞–ª–æ–Ω:  {correct_ans}")
            print(f"üî∏ –û—Ç–≤–µ—Ç:   {student_ans}")
            print(f"üì£ –û—Ç–≤–µ—Ç LLM: {feedback}")
            print(f"‚úÖ –ë–∞–ª–ª: {score}/2")
            print("-" * 60)

            results.append((i, score))

    return student_id, total_score, results

# === 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ª–æ–≥–æ–º ===
results = []
for idx, row in csv_df.iterrows():
    student_id = str(row[ID_COLUMN_NAME]).strip()
    student_answers_raw = row.values[question_start_index:question_start_index + num_questions]
    student_answers = [str(ans).strip() if pd.notna(ans) else "" for ans in student_answers_raw]

    print(f"\nüîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}:")
    student_id, total_score, student_results = grade_student(
        student_id, ethalon_questions, ethalon_answers, student_answers
    )

    results.append({
        "ID —Å—Ç—É–¥–µ–Ω—Ç–∞": student_id,
        f"–û—Ü–µ–Ω–∫–∞ (–∏–∑ 10)": total_score
    })

# === 6. –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
results_df = pd.DataFrame(results)
print("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞:")
print(results_df)